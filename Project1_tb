`timescale 1ns / 1ps

module Project1_tb;

  //variables
  reg clock;              
  reg reset_n;            
  reg capture;            
  reg [7:0] d_in;         
  reg [1:0] op;           
  wire [8:0] result;      
  wire valid;             

  // instatiate the test
  Project1 test_bench (.clock(clock),.reset_n(reset_n),.capture(capture),.d_in(d_in),
  .op(op), .result(result),.valid(valid));

  // manually sets clock to toggles every 5ns
  always #5 clock = ~clock;

  initial begin
  // initialize
    clock = 0;
    reset_n = 0;
    capture = 0;
    d_in = 8'b0;
    op = 2'b0;

    // turns off reset state
    #10 reset_n = 1;  // sets reset to off (active low synch)

    // all the following testbenches set valid to 1 after the four inputs, then holds it there for one clock cycles using 
    //#10 before bringing it back down to zero by setting reset to zero
    
    // all zeroes
    #10 
    capture = 1; 
    op = 2'b00; 
    d_in = 8'b00000000;  
    #10 
    capture = 1; 
    op = 2'b01; 
    d_in = 8'b00000000;  
    #10 
    capture = 1; 
    op = 2'b10; 
    d_in = 8'b00000000;  
    #10 
    capture = 1; 
    op = 2'b11; 
    d_in = 8'b00000000;  
    #10 
    capture = 0;  
    reset_n = 0; //sets valid back to 0
    #10 
    reset_n = 1;  
    

    // (3+4) - (2+1)
    #10 
    capture = 1; 
    op = 2'b00; 
    d_in = 8'd3;  
    #10 
    capture = 1; 
    op = 2'b01; 
    d_in = 8'd4;  
    #10 
    capture = 1; 
    op = 2'b10;
    d_in = 8'd2;  
    #10 capture = 1; 
    op = 2'b11; 
    d_in = 8'd1;   
    #10 capture = 0;  
    reset_n = 0;
    #10 reset_n = 1;  

    // (3+4) - (2+1) but in a different order
    #10 
    capture = 1; 
    op = 2'b01; 
    d_in = 8'd4;  
    #10 
    capture = 1; 
    op = 2'b00; 
    d_in = 8'd3;  
    #10 
    capture = 1; 
    op = 2'b11; 
    d_in = 8'd1;   
    #10 
    capture = 1; 
    op = 2'b10; 
    d_in = 8'd2;
    #10 
    capture = 0;  
    reset_n = 0;
    #10 
    reset_n = 1; 
    
    // (10+10) - (10+10)
    #10 
    capture = 1; 
    op = 2'b00; 
    d_in = 8'd10;  
    #10 
    capture = 1; 
    op = 2'b01; 
    d_in = 8'd10;  
    #10 
    capture = 1; 
    op = 2'b10; 
    d_in = 8'd10;  
    #10 
    capture = 1; 
    op = 2'b11; 
    d_in = 8'd10;   
    #10 
    capture = 0;  
    reset_n = 0;
    #10 reset_n = 1;     

    // overflow check (0xFF + 100) - (10 + 10)
    #10 
    capture = 1; 
    op = 2'b00; 
    d_in = 8'd255;  
    #10 
    capture = 1; 
    op = 2'b01; 
    d_in = 8'd100;    
    #10 
    capture = 1; 
    op = 2'b10; 
    d_in = 8'd10;    
    #10 
    capture = 1; 
    op = 2'b11; 
    d_in = 8'd10;    
    reset_n = 0;
    #10 
    reset_n = 1;    
    #10 
    capture = 0; 
    
    $finish;
  end
