`timescale 1ns / 1ps

module Project1 (
  input clock, reset_n, capture, input [7:0] d_in, input [1:0] op,                        
  output [8:0] result, output valid                           
);

  wire [7:0] A, B, C, D; // wire leaving the DFF
  // DFF instatiations
  dff dff_A (.clock(clock), .reset_n(reset_n), .Q(A), .D(d_in), .enable(enable_A));
  dff dff_B (.clock(clock), .reset_n(reset_n), .Q(B), .D(d_in), .enable(enable_B));
  dff dff_C (.clock(clock), .reset_n(reset_n), .Q(C), .D(d_in), .enable(enable_C));
  dff dff_D (.clock(clock), .reset_n(reset_n), .Q(D), .D(d_in), .enable(enable_D));
  
  wire enable_A, enable_B, enable_C, enable_D; // enable signal to turn each DFF on and off
  // enable operand when capture is high and op matches its respective bit number 
  assign enable_A = (capture && op == 2'b00);
  assign enable_B = (capture && op == 2'b01);
  assign enable_C = (capture && op == 2'b10);
  assign enable_D = (capture && op == 2'b11);
  
  wire [8:0] sum1, sum2, result; // wire between the adders
  // adders
  rca_adder ab(.one(A), .two(B), .sum(sum1));  // a + b
  rca_adder cd(.one(C), .two(D), .sum(sum2));  // c + d

  // subtractor
  rca_subtracter subtracter (.sum1(sum1), .sum2(sum2), .result(final)); // (a+b) - (c+d)

  // puts final value into result port
  assign result = final; 

  wire reference_A, reference_B, reference_C, reference_D; // reference for valid
// uses the enable variable to indicate to valid if it has a value yet
  assign reference_A = (reset_n == 0) ? 0 : (reference_A | enable_A);
  assign reference_B = (reset_n == 0) ? 0 : (reference_B | enable_B);
  assign reference_C = (reset_n == 0) ? 0 : (reference_C | enable_C);
  assign reference_D = (reset_n == 0) ? 0 : (reference_D | enable_D);
  
// if reset is 0, it will reset all reference values. else, check if it has been enabled

// turn on valid to high if all 4 wires got a value
  assign valid = (reset_n == 0) ? 0 : reference_A & reference_B & reference_C & reference_D;

endmodule

// DFF module
module dff(output reg [7:0] Q, input [7:0] D, input clock,input reset_n, input enable);
  always @(posedge clock) begin
    if (!reset_n) // active-low synchronous reset check
      Q <= 0;           
    else if (enable) // when respective enable signal is high, assign D to output Q
      Q <= D;             
  end
endmodule

// adder
module rca_adder(input [7:0] one, two, 
output [8:0] sum);
assign sum = one + two;
endmodule

// subtractor
module rca_subtracter(input [8:0] sum1, sum2, 
output [8:0] result);
assign result = sum1 - sum2;
endmodule
